external_components:
  source: github://dhewg/esphome-miot@main

esphome:
  name: changeme
  friendly_name: changeme

esp8266:
  board: esp_wroom_02

time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Berlin
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "changeme"
  reboot_timeout: 0s
  services:
    - service: mcu_command
      variables:
        command: string
      then:
        - lambda: 'id(miot_main).queue_command(command);'

ota:
  - platform: esphome
    password: !secret ota_pw

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  fast_connect: True

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "changeme"
    password: !secret fallback_pass

captive_portal:

uart:
  tx_pin: GPIO15
  rx_pin: GPIO13
  baud_rate: 115200

miot:
  id: miot_main

switch:
  - platform: "miot"
    id: "on"
    miot_siid: 2
    miot_piid: 1
    name: "Power"
    icon: "mdi:power"
    on_turn_off:
      - lambda: |- 
          if(id(template_fan).state == true) {
            auto call = id(template_fan).turn_off();
            call.perform();
          }
    on_turn_on:
      - lambda: |- 
          if(id(template_fan).state == false) {
            auto call = id(template_fan).turn_on();
            call.perform();
          }
  - platform: "miot"
    id: "horizontal_swing"
    miot_siid: 2
    miot_piid: 3
    name: "Oscillation"
    icon: "mdi:arrow-oscillating"
    on_turn_off:
      - lambda: |-
          if (id(template_fan).oscillating == true) {
            auto call = id(template_fan).make_call();
            call.set_oscillating(false);
            call.set_preset_mode(id(mode).state.c_str());
            call.perform();
          }
    on_turn_on:
      - lambda: |-
          if (id(template_fan).oscillating == false) {
            auto call = id(template_fan).make_call();
            call.set_oscillating(true);
            call.set_preset_mode(id(mode).state.c_str());
            call.perform();
          }

  - platform: "miot"
    miot_siid: 2
    miot_piid: 12
    name: "Indicator Lights"
    icon: "mdi:lightbulb"
    entity_category: config
  - platform: "miot"
    miot_siid: 2
    miot_piid: 11
    name: "Notification Sounds"
    icon: "mdi:volume-high"
    entity_category: config
  - platform: "miot"
    miot_siid: 3
    miot_piid: 1
    name: "Child Lock"
    icon: "mdi:lock"
    entity_category: config
  
select:
  - platform: "miot"
    id: "mode"
    miot_siid: 2
    miot_piid: 7
    name: "Mode"
    icon: "mdi:leaf"
    options:
      0: "Direct Breeze"
      1: "Natural Breeze"
    on_value:
      - lambda: |-
          if(id(template_fan).preset_mode != x) {
            auto call = id(template_fan).make_call();
            call.set_preset_mode(x.c_str());
            call.perform();
          }

number:
  - platform: "miot"
    miot_siid: 2
    miot_piid: 2
    name: "Fan Level"
    icon: "mdi:fan-chevron-up"
    min_value: 1
    max_value: 3
    step: 1
  - platform: "miot"
    miot_siid: 2
    miot_piid: 10
    name: "Off Delay"
    icon: "mdi:clock-outline"
    unit_of_measurement: "min"
    device_class: duration
    min_value: 0
    max_value: 480
    step: 1

button:
  - platform: "miot"
    miot_siid: 2
    miot_aiid: 1
    name: "Toggle Power"
    icon: "mdi:power-cycle"
  - platform: "miot"
    name: "Toggle Mode"
    icon: "mdi:leaf"
    miot_siid: 4
    miot_aiid: 1
  - platform: "miot"
    name: "Toggle Speed"
    icon: "mdi:fan"
    miot_siid: 4
    miot_aiid: 2

fan:
  - platform: "template"
    id: template_fan
    name: None
    has_oscillating: true
    speed_count: 100
    preset_modes:
      - "Direct Breeze"
      - "Natural Breeze"
    restore_mode: NO_RESTORE
    on_turn_on:
      - lambda: if (id(on).state == false) id(on).turn_on();
    on_turn_off:
      - lambda: if (id(on).state == true) id(on).turn_off();
    on_oscillating_set:
      - lambda: |-
          if (id(horizontal_swing).state != x) {
            if (x == true) {
              id(horizontal_swing).turn_on();
            } else {
              id(horizontal_swing).turn_off();
            }
          }
          auto call = id(template_fan).make_call();
          call.set_preset_mode(id(mode).state.c_str());
          call.perform();
